using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using RentAll.DAL;
using RentAll.DAL.DAO;
using RentAll.DAL.Domain_Classes;
using RentAll.Helpers;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;

namespace RentAll.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class LoginController : ControllerBase
    {
        AppDbContext _db;
        IConfiguration configuration;
        public LoginController(AppDbContext db, IConfiguration configuration)
        {
            _db = db;
            this.configuration = configuration;
        }

        //will allow the user to go to login page.
        [AllowAnonymous]
        [HttpPost]
        [Produces("application/json")]

        public async Task<ActionResult<UserHelper>>Index(UserHelper userHelper)
        {
            UserDAO dao = new UserDAO(_db);
            User user= await dao.GetByEmail(userHelper.Email);

            if (user != null)//wi
            {
                if (VerifyPassword(userHelper.Password, user.Hash, user.Salt))
                {
                    userHelper.Password = "";
                    var appSettings = configuration.GetSection("AppSettings").GetValue<string>("Secret");

                    // authentication successful so generate jwt token
                    var tokenHandler = new JwtSecurityTokenHandler();
                    var key = Encoding.ASCII.GetBytes(appSettings);
                    var tokenDescriptor = new SecurityTokenDescriptor
                    {
                        Subject = new ClaimsIdentity(new Claim[]
                    {
                        new Claim(ClaimTypes.Name, user.Id.ToString())
                    }),
                        Expires = DateTime.UtcNow.AddDays(7),
                        SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
                    };
                    var token = tokenHandler.CreateToken(tokenDescriptor);
                    string returnToken = tokenHandler.WriteToken(token);
                    userHelper.Token = returnToken;
                }
                else
                {
                    userHelper.Token = "user name or password invalid - login failed";
                }
            }
            else
            {
                userHelper.Token = "no such user - login failed";
            }
            return userHelper;

        }
        //verifies the password.
        public static bool VerifyPassword(string enteredPassword, string storedHash, string storedSalt)
        {
            var saltBytes = Convert.FromBase64String(storedSalt);
            var rfc2898DeriveBytes = new Rfc2898DeriveBytes(enteredPassword, saltBytes, 10000);

            //checks if the store hash value is same generated by Customer's password.
            return Convert.ToBase64String(rfc2898DeriveBytes.GetBytes(256)) == storedHash;
        }
    }
}
